{$IFNDEF DEBUG}
  {$DEFINE DEBUG}
{$ENDIF}

{$IFNDEF BuildHelperDefault}
{$DEFINE BuildHelperDefault}

{$IFDEF DEBUG}
  {$IFNDEF BuildHelperCore}
    {$INCLUDE BuildHelperCore.script}
  {$ENDIF}
{$ENDIF}


function BH_Default_AddQuarries(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  buildersCount: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htQuarry)) then
  begin
    if (planning) then
    begin
      result := BH_AddBuildingInfo(result, htQuarry);
    end;

    exit;
  end;

  if (buildings.School > 1) then
  begin
    exit;
  end;

  case buildings.Quarry of
    0:
      begin
        result := BH_AddBuildingInfo(result, htQuarry);
        if (buildings.Woodcutters > 0) then
        begin
          result := BH_AddBuildingInfo(result, htQuarry);
        end;
      end;
    1:
      begin
        result := BH_AddBuildingInfo(result, htQuarry);
        result := BH_AddBuildingInfo(result, htQuarry);

        if (Length(result) < BH_GetMaxPlayerPlannedBuildings(player, planning)) then
        begin
          result := BH_AddBuildingInfo(result, htQuarry);
        end;
      end;
    2,3,4:
      result := BH_AddMultipleBuildingInfo(result, htQuarry, 5 - buildings.Quarry, maxBuildingsCount);
    else
      begin

        buildersCount := S.StatUnitTypeCountEx(player.Id, utBuilder);
        // 1 quarry for 5 builders. TODO. Think about it.
        if (buildings.Quarry < (buildersCount div 5 + U.IfThenI(buildersCount mod 5 = 0, 0, 1))) then
        begin
          result := BH_AddBuildingInfo(result, htQuarry);
        end;
      end;

  end;
end;

function BH_Default_AddBakeries(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (buildings.Bakery < buildings.Mill) then
  begin
    result := BH_AddMultipleBuildingInfo(result, htBakery, buildings.Mill - buildings.Bakery, maxBuildingsCount);
  end;
end;

function BH_Default_Slow_AddQuarries(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  buildersCount: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (buildings.School > 1) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htQuarry)) then
  begin
    if (planning and (buildings.School > 0)) then
    begin
      result := BH_AddMultipleBuildingInfo(result, htQuarry, 4, maxBuildingsCount);
    end;

    exit;
  end;

  case buildings.Quarry of
    0:
      result := BH_AddMultipleBuildingInfo(result, htQuarry, 4, maxBuildingsCount);
    1,2,3,4:
      result := BH_AddMultipleBuildingInfo(result, htQuarry, 5 - buildings.Quarry, maxBuildingsCount);
    else
      begin

        buildersCount := S.StatUnitTypeCount(player.Id, utBuilder);
        // 1 quarry for 5 builders. TODO. Think about it.
        if (buildings.Quarry < (buildersCount div 5 + U.IfThenI(buildersCount mod 5 = 0, 0, 1))) then
        begin
          result := BH_AddBuildingInfo(result, htQuarry);
        end;
      end;

  end;
end;

function BH_Default_AddTowers(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount, timeToPlace: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htWatchTower)) then
  begin
    exit;
  end;

  case buildings.WatchTower of
    0,1,2:
      begin
        if (planning and (S.GameTime > (timeToPlace-1)*BH_Minutes) and (S.GameTime < timeToPlace*BH_Minutes)) then
        begin
          result := BH_AddMultipleBuildingInfo(result, htWatchTower, 3 - buildings.WatchTower, maxBuildingsCount);
          exit;
        end;
        if (S.GameTime > timeToPlace*BH_Minutes) then
        begin
          result := BH_AddMultipleBuildingInfo(result, htWatchTower, 3 - buildings.WatchTower, maxBuildingsCount);
        end;
      end;
    3,4:
      result := BH_AddMultipleBuildingInfo(result, htWatchTower, 5 - buildings.WatchTower, maxBuildingsCount);
    5,6:
      result := BH_AddMultipleBuildingInfo(result, htWatchTower, 7 - buildings.WatchTower, maxBuildingsCount);
  end;
end;

{$ENDIF}