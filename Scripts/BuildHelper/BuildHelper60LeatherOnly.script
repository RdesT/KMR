//{$IFNDEF DEBUG}
//  {$DEFINE DEBUG}
//{$ENDIF}

{$IFNDEF BuildHelper60LeatherOnly}
{$DEFINE BuildHelper60LeatherOnly}

{$IFDEF DEBUG}

  {$IFNDEF BuildHelperCore}
    {$INCLUDE BuildHelperCore.script}
  {$ENDIF}

  {$IFNDEF BuildHelper60Default}
    {$INCLUDE BuildHelper60Default.script}
  {$ENDIF}
{$ENDIF}

//----------------------------------------------------------------------------------------------------------------------------------------------------
//ADDING PLANNED BUILDINGS FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------

function BH_LeatherOnly60_AddAdditionalWoodcutters(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  case buildings.Woodcutters of
    4,5,6,7:
      begin

        if (buildings.Farm > 1) then
        begin
          Inc(needToBuild);
        end;
        if (buildings.Sawmill > 2) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htWoodcutters, needToBuild - buildings.Woodcutters + 4, maxBuildingsCount);
      end;
    8,9:
      if (buildings.School > 2) then
      begin
        result := BH_AddMultipleBuildingInfo(result, htWoodcutters, 10 - buildings.Woodcutters, maxBuildingsCount);
      end;
    else
      begin

      end;
  end;
end;

function BH_LeatherOnly60_AddCoalMines(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htCoalMine)) then
  begin
    if (planning) then
    begin
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
    end;

    exit;
  end;

  case buildings.CoalMine of
    0:
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
    1:
      if ((buildings.Inn > 0) and (buildings.Sawmill > 1) and (buildings.Farm > 1)) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
    2:
      if (buildings.ArmorWorkshop > 3) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
  end;
end;

function BH_LeatherOnly60_AddFarms(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htFarm)) then
  begin
    if (planning) then
    begin
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htFarm);
      end;
    end;

    exit;
  end;

  case buildings.Farm of
    0:
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htFarm);
      end;
    1,2,3,4,5,6:
      begin

        if ((buildings.Woodcutters >= 4) and (buildings.Metallurgists > 0)) then
        begin
          Inc(needToBuild);
        end;

        if ((buildings.Woodcutters >= 6) and (buildings.Metallurgists > 0)) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Farm > 1) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Swine > 0) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Swine > 1) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Swine > 2) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htFarm, needToBuild - buildings.Farm + 1, maxBuildingsCount);
      end;

    7,8:
      if (buildings.School > 2) then
      begin
        result := BH_AddMultipleBuildingInfo(result, htFarm, 9 - buildings.Farm, maxBuildingsCount);
      end;
  end;
end;

function BH_LeatherOnly60_AddTanneries(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htTannery)) then
  begin
    exit;
  end;

  case buildings.Tannery of
    0:
      if ((buildings.Barracks > 0) or ((buildings.Farm > 5) and (buildings.Swine > 2))) then
      begin

        if (planning and (S.StatResourceProducedCountEx(player.Id, wtSkin) > 2) or (BH_GetPlayerSkinsCount(player.Id) > 0)) then
        begin
          result := BH_AddBuildingInfo(result, htTannery);
        end else
        if ((S.StatResourceProducedCountEx(player.Id, wtSkin) > 3) or (BH_GetPlayerSkinsCount(player.Id) > 0)) then
        begin
          result := BH_AddBuildingInfo(result, htTannery);
        end

      end;
    1:
      if (buildings.ArmorWorkshop > 0) then
      begin
        result := BH_AddBuildingInfo(result, htTannery);
      end;

  end;
end;

function BH_LeatherOnly60_AddWeaponWorkshops(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htWeaponWorkshop)) then
  begin
    exit;
  end;

  case buildings.WeaponWorkshop of
    0,1:
      if (buildings.Farm > 6) then
      begin
        result := BH_AddMultipleBuildingInfo(result, htWeaponWorkshop, 2 - buildings.WeaponWorkshop, maxBuildingsCount);
      end;
    2:
      if (buildings.Tannery > 1) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponWorkshop);
      end;
    3:
      if (buildings.Farm > 7) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponWorkshop);
      end;
  end;
end;

function BH_LeatherOnly60_AddArmorWorkshops(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htArmorWorkshop)) then
  begin
    exit;
  end;

  case buildings.ArmorWorkshop of
    0,1:
      if (buildings.Tannery > 0) then
      begin
        result := BH_AddMultipleBuildingInfo(result, htArmorWorkshop, 2 - buildings.ArmorWorkshop, maxBuildingsCount);
      end;
    2,3,4:
      begin

        if ((buildings.Tannery > 0) and (buildings.Sawmill > 3)) then
        begin
          Inc(needToBuild);
          Inc(needToBuild);
        end;

        if (buildings.Tannery > 1) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htArmorWorkshop, needToBuild - buildings.ArmorWorkshop + 2, maxBuildingsCount);

      end;
  end;
end;

function BH_LeatherOnly60_AddSwineFarms(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  freeFarmsResource: Single;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htSwine)) then
  begin
    exit;
  end;

  case buildings.Swine of
    0:
      begin
        if (planning) then
        begin
          if (((S.GameTime - player.FirstFarmTime > 7 * BH_Minutes) and (S.GameTime - player.FirstFarmTime < 8 * BH_Minutes)) or (buildings.Farm > 2)) then
          begin
            result := BH_AddBuildingInfo(result, htSwine);
          end;
          exit;
        end;

        if ((S.GameTime - player.FirstFarmTime > 8 * BH_Minutes) or (buildings.Farm > 2)) then
        begin
          result := BH_AddBuildingInfo(result, htSwine);
        end;
      end;
    1:
      result := BH_AddBuildingInfo(result, htSwine);
    2:
      if (buildings.Farm > 4) then
        begin
          result := BH_AddBuildingInfo(result, htSwine);
        end;
    3:
      if (buildings.Farm > 7) then
      begin
        result := BH_AddBuildingInfo(result, htSwine);
      end;
    else
      begin

        freeFarmsResource := buildings.Farm - buildings.Stables * 2.05 + buildings.Swine * 1.63 + buildings.Mill * 1.17;
        result := BH_AddMultipleBuildingInfo(result, htSwine, Round(freeFarmsResource / 1.63), maxBuildingsCount);
      end;
  end;
end;

function BH_LeatherOnly60_AddStables(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htStables)) then
  begin
    exit;
  end;

  if ((buildings.Stables = 0) and (buildings.Farm > 7)) then
  begin
    result := BH_AddBuildingInfo(result, htStables);
  end;

end;

//----------------------------------------------------------------------------------------------------------------------------------------------------
//SLOW ORDER PLANNED BUILDINGS FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------



//----------------------------------------------------------------------------------------------------------------------------------------------------
//ADVICES FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------



//----------------------------------------------------------------------------------------------------------------------------------------------------
//PLANNED BUILDINGS FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------

function BH_LeatherOnly60_GetPlannedHouses(player: BH_Player; buildings: BH_BuildingsCountInfo; planning: boolean): array of BH_BuildingInfo;
var
  maxBuildingsCount: integer;

begin

  if (player.IsSlowBuildOrder) then
  begin
    result := BH_Default60_Slow_GetPlannedHouses(player, buildings, planning);
    exit;
  end;

  maxBuildingsCount := BH_GetMaxPlayerPlannedBuildings(player, planning);

  result := BH_Default60_AddInns(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddSchools(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddTowers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddButchers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddFishers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddGoldMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddSawmills(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddStartingWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  result := BH_LeatherOnly60_AddAdditionalWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  result := BH_LeatherOnly60_AddCoalMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddMetallurgists(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddLowPrioritySchools(result, buildings, player, maxBuildingsCount, planning);
  result := BH_LeatherOnly60_AddFarms(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddBarracks(result, buildings, player, maxBuildingsCount, planning);
  result := BH_LeatherOnly60_AddArmorWorkshops(result, buildings, player, maxBuildingsCount, planning);
  result := BH_LeatherOnly60_AddWeaponWorkshops(result, buildings, player, maxBuildingsCount, planning);
  result := BH_LeatherOnly60_AddTanneries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_LeatherOnly60_AddSwineFarms(result, buildings, player, maxBuildingsCount, planning);
  result := BH_LeatherOnly60_AddStables(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddBakeries(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddMills(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddQuarries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddMarkets(result, buildings, player, maxBuildingsCount, planning);

end;

{$ENDIF}