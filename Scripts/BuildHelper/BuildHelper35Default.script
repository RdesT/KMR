//{$IFNDEF DEBUG}
//  {$DEFINE DEBUG}
//{$ENDIF}

{$IFNDEF BuildHelper35Default}
{$DEFINE BuildHelper35Default}

{$IFDEF DEBUG}
  {$IFNDEF BuildHelperCore}
    {$INCLUDE BuildHelperCore.script}
  {$ENDIF}
{$ENDIF}

{$IFNDEF BuildHelperDefault}
  {$INCLUDE BuildHelperDefault.script}
{$ENDIF}

//----------------------------------------------------------------------------------------------------------------------------------------------------
//ADDING PLANNED BUILDINGS FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------

function BH_Default35_AddInns(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htInn)) then
  begin
    exit;
  end;

  case buildings.Inn of
    1:
      if ((buildings.Bakery > 1) or (buildings.Butchers > 1)) then
      begin
        result := BH_AddBuildingInfo(result, htInn);
      end;
  end;
end;

function BH_Default35_AddSchools(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htSchool)) then
  begin
    exit;
  end;

  case buildings.School of
    0:
      result := BH_AddBuildingInfo(result, htSchool);
    1:
      if (planning) then
      begin
        //TODO check timings.
        if (S.GameTime > 27*BH_Minutes) then
        begin
          result := BH_AddBuildingInfo(result, htSchool);
        end;
      end else
      begin
        if (S.GameTime > 28*BH_Minutes) then
        begin
          result := BH_AddBuildingInfo(result, htSchool);
        end;
      end;
  end;
end;

function BH_Default35_AddQuarries(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  buildersCount: integer;
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htQuarry)) then
  begin
    if (planning) then
    begin
      result := BH_AddBuildingInfo(result, htQuarry);
    end;

    exit;
  end;

  if (buildings.School > 1) then
  begin
    exit;
  end;

  case buildings.Quarry of
    0:
      begin
        result := BH_AddBuildingInfo(result, htQuarry);
        if (buildings.Woodcutters > 0) then
        begin
          result := BH_AddBuildingInfo(result, htQuarry);
        end;
      end;
    1:
      begin
        result := BH_AddBuildingInfo(result, htQuarry);
        result := BH_AddBuildingInfo(result, htQuarry);

        if (Length(result) < BH_GetMaxPlayerPlannedBuildings(player, planning)) then
        begin
          result := BH_AddBuildingInfo(result, htQuarry);
        end;
      end;
    2,3,4:
      begin
        needToBuild := 2;

        if (buildings.GoldMine > 0) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htQuarry, needToBuild - buildings.Quarry + 2, maxBuildingsCount);
      end;
    else
      begin

        buildersCount := S.StatUnitTypeCountEx(player.Id, utBuilder);
        // 1 quarry for 5 builders. TODO. Think about it.
        if (buildings.Quarry < (buildersCount div 5 + U.IfThenI(buildersCount mod 5 = 0, 0, 1))) then
        begin
          result := BH_AddBuildingInfo(result, htQuarry);
        end;
      end;

  end;
end;

function BH_Default35_AddStartingWoodcutters(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htWoodcutters)) then
  begin
    if (planning) then
    begin
      result := BH_AddBuildingInfo(result, htWoodcutters);
    end;

    exit;
  end;

  //TODO count starting wood and trees.

  case buildings.Woodcutters of
    0,1,2,3,4,5:
      begin

        Inc(needToBuild);

        if (buildings.Quarry > 2) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Sawmill > 0) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Quarry > 3) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.GoldMine > 0) then
        begin
          Inc(needToBuild);
        end;

         if ((buildings.Metallurgists > 0) or (buildings.Sawmill > 1) or (buildings.Woodcutters > 3)) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htWoodcutters, needToBuild - buildings.Woodcutters, maxBuildingsCount);
      end;
  end;
end;

function BH_Default35_AddAdditionalWoodcutters(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  case buildings.Woodcutters of
    6,7:
      begin

        if (buildings.Sawmill > 2) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Farm > 0) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htWoodcutters, needToBuild - buildings.Woodcutters + 6, maxBuildingsCount);
      end;
    else
      begin
        //TODO. Make unlimited building.
      end;
  end;
end;

function BH_Default35_AddSawmills(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htSawmill)) then
  begin
    if (planning) then
    begin
      if ((buildings.Woodcutters > 0) and (buildings.Quarry > 1)) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    end;

    exit;
  end;

  case buildings.Sawmill of
    0:
      if ((buildings.Woodcutters > 0) and (buildings.Quarry > 1)) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    1:
      if ((buildings.Woodcutters > 2) or (buildings.GoldMine > 0)) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    2:
      if (buildings.GoldMine > 1) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    3:
      if (buildings.Woodcutters > 7) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    4:
      if (buildings.Woodcutters > 8) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
  end;
end;

function BH_Default35_AddLowPrioritySchools(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htSchool)) then
  begin
    exit;
  end;

  case buildings.School of
    2:
      //TODO. Think about this. Not sure that it's needed fast.
      if (buildings.Metallurgists > 2) then
      begin
        result := BH_AddBuildingInfo(result, htSchool);
      end;
  end;
end;

function BH_Default35_AddTowers(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin
  //Start placing towers at 33th minute.
  result := BH_Default_AddTowers(addedBuildings, buildings, player, maxBuildingsCount, 33, planning);
end;

function BH_Default35_AddFishers(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htFishermans)) then
  begin
    exit;
  end;

  if (player.PossibleFishermansCount = 0) then
  begin
    exit;
  end;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if ((buildings.Fishermans = 0) and (buildings.Sawmill > 2) and (buildings.Metallurgists > 0) and (buildings.Inn > 0)) then
  begin
    result := BH_AddBuildingInfo(result, htFishermans);
  end;
end;

function BH_Default35_AddGoldMines(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (player.PossibleGoldMinesCount = 0) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htGoldMine)) then
  begin
    if (planning) then
    begin
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htGoldMine);
      end;
    end;

    exit;
  end;

  case buildings.GoldMine of
    0:
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htGoldMine);
      end;
    1:
      if ((buildings.Inn > 0) and (buildings.Sawmill > 1) and (buildings.Metallurgists > 0)) then
      begin
        result := BH_AddBuildingInfo(result, htGoldMine);
      end;
    //TODO.
    //2:
    //  if (buildings.ArmorWorkshop > 3) then
    //  begin
    //    result := BH_AddBuildingInfo(result, htGoldMine);
    //  end;
  end;
end;

function BH_Default35_AddIronMines(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htIronMine)) then
  begin
    exit;
  end;

  if (player.PossibleIronMinesCount = 0) then
  begin
    exit;
  end;

  case buildings.IronMine of
    0:
      if (buildings.Metallurgists > 0) then
      begin
        result := BH_AddBuildingInfo(result, htIronMine);
      end;
    1:
      if (buildings.IronMine > 0) then
      begin
        result := BH_AddBuildingInfo(result, htIronMine);
      end;
    2:
      if ((buildings.ArmorSmithy + buildings.WeaponSmithy) > 1) then
      begin
        result := BH_AddBuildingInfo(result, htIronMine);
      end;
    3:
      if (buildings.IronSmithy > 2) then
      begin
        result := BH_AddBuildingInfo(result, htIronMine);
      end;
  end;
end;

function BH_Default35_AddCoalMines(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htCoalMine)) then
  begin
    if (planning) then
    begin
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
    end;

    exit;
  end;

  case buildings.CoalMine of
    0:
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
    1,2,3,4,5,6:
      begin
        if (buildings.Metallurgists > 0) then
        begin
          Inc(needToBuild);
        end;

        if ((buildings.Inn > 0) and (buildings.Sawmill > 1) and (buildings.Metallurgists > 0)) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.IronMine > 0) then
        begin
          Inc(needToBuild);
          Inc(needToBuild);
        end;

        if (buildings.IronSmithy > 0) then
        begin
          Inc(needToBuild);
        end;

        //Not more.

        if ((buildings.ArmorSmithy + buildings.WeaponSmithy) > 1) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htCoalMine, needToBuild - buildings.CoalMine + 1 , maxBuildingsCount);
      end;
  end;
end;

function BH_Default35_AddMetallurgists(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htMetallurgists)) then
  begin
    if (planning) then
    begin
      if (buildings.GoldMine > 0) then
      begin
        result := BH_AddBuildingInfo(result, htMetallurgists);
      end;
    end;

    exit;
  end;

  result := BH_AddMultipleBuildingInfo(result, htMetallurgists, buildings.GoldMine - buildings.Metallurgists, maxBuildingsCount);
end;

function BH_Default35_AddIronSmithies(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htIronSmithy)) then
  begin
    if (planning) then
    begin
      if (buildings.IronMine > 0) then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
    end;

    exit;
  end;

  case buildings.IronSmithy of
    0:
      if (buildings.IronMine > 0) then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
    1:
      if ((buildings.ArmorSmithy + buildings.WeaponSmithy) > 1) then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
    2:
      if (buildings.IronMine > 2)  then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
  end;
end;

function BH_Default35_AddArmorSmithies(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htArmorSmithy)) then
  begin
    if (planning) then
    begin
      if (buildings.IronSmithy > 0) then
      begin
        result := BH_AddBuildingInfo(result, htArmorSmithy);
      end;
    end;

    exit;
  end;

  case buildings.ArmorSmithy of
    0:
      if (buildings.IronSmithy > 0) then
      begin
        result := BH_AddBuildingInfo(result, htArmorSmithy);
      end;
    1:
      if (buildings.IronSmithy > 2) then
      begin
        result := BH_AddBuildingInfo(result, htArmorSmithy);
      end;
  end;
end;

function BH_Default35_AddWeaponSmithies(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htWeaponSmithy)) then
  begin
    if (planning) then
    begin
      if (buildings.IronSmithy > 0) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponSmithy);
      end;
    end;

    exit;
  end;

  case buildings.WeaponSmithy of
    0:
      if (buildings.IronSmithy > 0) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponSmithy);
      end;
    1:
      if (buildings.IronSmithy > 2) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponSmithy);
      end;
  end;
end;

function BH_Default35_AddWeaponWorkshops(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htWeaponWorkshop)) then
  begin
    exit;
  end;

  case buildings.WeaponWorkshop of
    0,1:
      begin

        if (buildings.GoldMine > 1) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Sawmill > 2) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htWeaponWorkshop, needToBuild - buildings.WeaponWorkshop, maxBuildingsCount);
      end;
    2:
      if (buildings.Sawmill > 3) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponWorkshop);
      end;
    3:
      if (buildings.Woodcutters > 8) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponWorkshop);
      end;
  end;
end;

function BH_Default35_AddFarms(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  case buildings.Farm of
    0:
      if ((buildings.WeaponWorkshop > 1) and (buildings.ArmorSmithy + buildings.WeaponSmithy > 1))then
      begin
        result := BH_AddBuildingInfo(result, htFarm);
      end;
    1:
      begin

        if (planning) then
        begin
          if (((S.GameTime - player.FirstFarmTime > 7 * BH_Minutes) and (S.GameTime - player.FirstFarmTime < 8 * BH_Minutes))) then
          begin
            result := BH_AddBuildingInfo(result, htFarm);
          end;
          exit;
        end;

        if (S.GameTime - player.FirstFarmTime > 8 * BH_Minutes) then
        begin
          result := BH_AddBuildingInfo(result, htFarm);
        end;

      end;
    //TODO after pt.
  end;
end;

function BH_Default35_AddMills(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  case buildings.Mill of
    0:
      begin
        if (planning) then
        begin
          if ((buildings.Farm > 0) and (S.GameTime - player.FirstFarmTime > 7 * BH_Minutes) and (S.GameTime - player.FirstFarmTime < 8 * BH_Minutes)) then
          begin
            result := BH_AddBuildingInfo(result, htMill);
          end;
          exit;
        end;

        if ((buildings.Farm > 0) and (S.GameTime - player.FirstFarmTime > 8 * BH_Minutes)) then
        begin
          result := BH_AddBuildingInfo(result, htMill);
        end;
      end;
    1:
      if (buildings.Farm > 1) then
      begin
        result := BH_AddBuildingInfo(result, htMill);
      end;
  end;
end;

function BH_Default35_AddSwineFarms(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

end;

function BH_Default35_AddButchers(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htButchers)) then
  begin
    exit;
  end;

end;

function BH_Default35_AddTanneries(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

end;

function BH_Default35_AddArmorWorkshops(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

end;

function BH_Default35_AddStables(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

end;

function BH_Default35_AddMarkets(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

end;

//----------------------------------------------------------------------------------------------------------------------------------------------------
//SLOW ORDER PLANNED BUILDINGS FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------------------------------
//ADVICES FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------------------------------
//PLANNED BUILDINGS FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------

function BH_Default35_Slow_GetPlannedHouses(player: BH_Player; buildings: BH_BuildingsCountInfo; planning: boolean): array of BH_BuildingInfo;
var
  maxBuildingsCount: integer;

begin
  maxBuildingsCount := BH_GetMaxPlayerPlannedBuildings(player, planning);

  //result := BH_Default60_Slow_AddInns(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddSchools(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddTowers(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddButchers(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddBakeries(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_Slow_AddFishers(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddGoldMines(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_Slow_AddSawmills(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_Slow_AddStartingWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddAdditionalWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddIronMines(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddCoalMines(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddMetallurgists(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddLowPrioritySchools(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_Slow_AddFarms(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddBarracks(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddArmorSmithies(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddWeaponSmithies(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddIronSmithies(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddArmorWorkshops(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddWeaponWorkshops(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddTanneries(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddSwineFarms(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddStables(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddMills(result, buildings, player, maxBuildingsCount, planning);
  //result := BH_Default60_AddMarkets(result, buildings, player, maxBuildingsCount, planning);

  //For slow build orders we want to make all quarries right at start.
  //result := BH_Default60_Slow_AddQuarries(result, buildings, player, 99, planning);
end;

function BH_Default35_GetPlannedHouses(player: BH_Player; buildings: BH_BuildingsCountInfo; planning: boolean): array of BH_BuildingInfo;
var
  maxBuildingsCount: integer;

begin

  if (player.IsSlowBuildOrder) then
  begin
    result := BH_Default35_Slow_GetPlannedHouses(player, buildings, planning);
    exit;
  end;

  maxBuildingsCount := BH_GetMaxPlayerPlannedBuildings(player, planning);

  result := BH_Default_AddFirstInn(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddInns(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddSchools(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddTowers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddButchers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default_AddBakeries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddFishers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddGoldMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddSawmills(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddStartingWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddAdditionalWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddIronMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddCoalMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddMetallurgists(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddLowPrioritySchools(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddFarms(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default_AddBarracks(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddArmorSmithies(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddWeaponSmithies(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddIronSmithies(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddArmorWorkshops(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddWeaponWorkshops(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddTanneries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddMills(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddSwineFarms(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddStables(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddQuarries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default35_AddMarkets(result, buildings, player, maxBuildingsCount, planning);

end;

{$ENDIF}
