{$IFNDEF BuildHelperCore}
{$DEFINE BuildHelperCore}

{$INCLUDE BuildHelperGlobal.script}
{$INCLUDE BuildHelperTerrain.script}

{$EVENT evtTick:BH_OnTickCore}
{$EVENT evtHouseBuilt:BH_OnHouseBuiltCore}
{$EVENT evtHouseDestroyed:BH_OnHouseDestroyedCore}
{$EVENT evtMissionStart:BH_OnMissionStartCore}

{$COMMAND DebugFlag:BH_SwitchDebugFlag}

var
  BH_DebugBuildingsFlag: boolean;
  BH_DebugMinesFlag: boolean;
  BH_DebugBuildingsPlansFlag: boolean;
  BH_DebugWaterFlag: boolean;
  BH_DebugFishFlag: boolean;


//BH_Player

procedure BH_AddPlayer(playerId: integer);
begin

  setLength(BH_Players, Length(BH_Players) + 1);
  BH_Players[High(BH_Players)].Id := playerId;
end;

//BH_BuildingCollection

function BH_FindBuildingInCollectionIndex(buildings: array of BH_BuildingCollection; buildingType: TKMHouseType): integer;
var
  i: integer;
begin

  result:= -1;
  for i:=0 to High(buildings) do
  begin
    if (buildings[i].BuildingType = buildingType) then
    begin
      result:= i;
      exit;
    end;
  end;
end;

function BH_AddBuildingTypeToCollection(buildings: array of BH_BuildingCollection; buildingType: TKMHouseType): array of BH_BuildingCollection;
var
  index: integer;
begin

  result := buildings;
  index:= BH_FindBuildingInCollectionIndex(result, buildingType);

  if (index <> -1)then
  begin
    exit;
  end;

  setLength(result, Length(result) + 1);
  result[High(result)].BuildingType := buildingType;
end;

//BH_BuildingInfo

function BH_FindBuildingInfoIndex(buildingsInfo: array of BH_BuildingInfo; buildingType: TKMHouseType): integer;
var
  i: integer;
begin

  result:= -1;
  for i:=0 to High(buildingsInfo) do
  begin
    if (buildingsInfo[i].BuildingType = buildingType) then
    begin
      result:= i;
      exit;
    end;
  end;
end;

function BH_GetAllBuildingsCount(buildingsInfo: array of BH_BuildingInfo): integer;
var
  i: integer;

begin
  for i:=0 to High(buildingsInfo) do
  begin
    result := result + buildingsInfo[i].Count;
  end;
end;

function BH_GetBuildingTypeCount(buildingsInfo: array of BH_BuildingInfo; buildingType: TKMHouseType): integer;
var
  i: integer;

begin

  result := 0;
  for i:=0 to High(buildingsInfo) do
  begin
    if (buildingsInfo[i].BuildingType = buildingType) then
    begin
      result:= buildingsInfo[i].Count;
      exit;
    end;
  end;
end;

function BH_AddBuildingInfo(buildings: array of BH_BuildingInfo; buildingType: TKMHouseType) :array of BH_BuildingInfo;
var
  index: integer;
begin

  result := buildings;
  index:= BH_FindBuildingInfoIndex(result, buildingType);

  if (index = -1) then
  begin
    setLength(result, Length(result) + 1);
    result[High(result)].BuildingType := buildingType;
    index := High(result);
  end;

  result[index].Count := result[index].Count + 1;
end;

function BH_AddMultipleBuildingInfo(buildings: array of BH_BuildingInfo; buildingType: TKMHouseType; count : integer; maxBuildingsCount: integer) :array of BH_BuildingInfo;
var
  i: integer;

begin

  if (count <= 0) then
  begin
    exit;
  end;

  result:= buildings;

  for i := 1 to count do
  begin
    if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
    begin
      exit;
    end;

    result := BH_AddBuildingInfo(result, buildingType);
  end;
end;

function BH_UniteBuildingInfos(buildings: array of BH_BuildingInfo; addingBuildings: array of BH_BuildingInfo) : array of BH_BuildingInfo;
var
  i: integer;
  index : integer;

begin

  result := buildings;

  for i:= 0 to High(buildings) do
  begin
    setLength(result, Length(result) + 1);
    result[High(result)].BuildingType := buildings[i].BuildingType;
    result[High(result)].Count := buildings[i].Count;
  end;

  for i:= 0 to High(addingBuildings) do
  begin
    index := BH_FindBuildingInfoIndex(result, addingBuildings[i].BuildingType);

    if (index = -1) then
    begin
      setLength(result, Length(result) + 1);
      result[High(result)].BuildingType := addingBuildings[i].BuildingType;
      result[High(result)].Count := addingBuildings[i].Count;
      index := High(result);
    end else
    begin
      result[index].Count := result[index].Count + addingBuildings[i].Count;
    end;
  end;
end;

function BH_BuildingCollectionToBuildingInfo(buildings: array of BH_BuildingCollection) : array of BH_BuildingInfo;
var
  i: integer;

begin

  for i:= 0 to High(buildings) do
  begin
    setLength(result, Length(result) + 1);
    result[High(result)].BuildingType := buildings[i].BuildingType;
    result[High(result)].Count := Length(buildings[i].Ids);
  end;

end;

//BH_Advise

function BH_FindTipsIndex(tips: array of BH_Advice; adviceId: string): integer;
var
  i: integer;
begin

  result:= -1;
  for i:=0 to High(tips) do
  begin
    if (tips[i].Id = adviceId) then
    begin
      result:= i;
      exit;
    end;
  end;
end;

function BH_AddTips(tips: array of BH_Advice; adviceId: string; color: BH_Color; showTime: integer; oneTimeAdvice: boolean):array of BH_Advice;
var
  index: integer;

begin

  result := tips;
  index:= BH_FindTipsIndex(result, adviceId);

  if (index <> -1) then
  begin
    exit;
  end;

  setLength(result, Length(result) + 1);
  result[High(result)].Id := adviceId;
  result[High(result)].ShowTime := showTime;
  result[High(result)].Color := color;
  result[High(result)].OneTimeAdvice := oneTimeAdvice;

end;

procedure BH_AddOneTimePlayerAdvice(playerId: integer; adviceId: string; color: BH_Color; showTime: integer);
var
  playerIndex: integer;
begin
  playerIndex:= BH_FindPlayerIndex(playerId);

  if (playerIndex = -1) then
  begin
    BH_AddPlayer(playerId);
    playerIndex := High(BH_Players);
  end;

  BH_Players[playerIndex].Advices := BH_AddTips(BH_Players[playerIndex].Advices, adviceId, color, showTime, true);
end;

function BH_RemoveTips(advices: array of BH_Advice; adviceId: string):array of BH_Advice;
var
  i: integer;
  index: integer;
  count : integer;
begin

  result:= advices;
  index := BH_FindTipsIndex(result, adviceId);

  if (index = -1) then
  begin
    exit;
  end;

  count:= Length(result);
  for i:= index to count - 2 do
  begin
    result[i]:=result[i+1];
  end;
  SetLength(result, count - 1);

end;

//BH_BuildingsCountInfo

function BH_GetPlayerBuildingsCountInfo(playerId: integer): BH_BuildingsCountInfo;
begin
  result.School := S.StatHouseTypeCountEx(playerId, htSchool);
  result.Inn:= S.StatHouseTypeCountEx(playerId, htInn);
  result.Quarry:= S.StatHouseTypeCountEx(playerId, htQuarry);
  result.Woodcutters:= S.StatHouseTypeCountEx(playerId, htWoodcutters);
  result.Sawmill:= S.StatHouseTypeCountEx(playerId, htSawmill);
  result.Farm:= S.StatHouseTypeCountEx(playerId, htFarm);
  result.Mill:= S.StatHouseTypeCountEx(playerId, htMill);
  result.Bakery:= S.StatHouseTypeCountEx(playerId, htBakery);
  result.Swine:= S.StatHouseTypeCountEx(playerId, htSwine);
  result.Butchers:= S.StatHouseTypeCountEx(playerId, htButchers);
  result.Vineyard:= S.StatHouseTypeCountEx(playerId, htVineyard);
  result.Goldmine:= S.StatHouseTypeCountEx(playerId, htGoldmine);
  result.Coalmine:= S.StatHouseTypeCountEx(playerId, htCoalmine);
  result.Metallurgists:= S.StatHouseTypeCountEx(playerId, htMetallurgists);
  result.Weaponworkshop:= S.StatHouseTypeCountEx(playerId, htWeaponworkshop);
  result.Tannery:= S.StatHouseTypeCountEx(playerId, htTannery);
  result.Armorworkshop:= S.StatHouseTypeCountEx(playerId, htArmorworkshop);
  result.Stables:= S.StatHouseTypeCountEx(playerId, htStables);
  result.Ironmine:= S.StatHouseTypeCountEx(playerId, htIronmine);
  result.Ironsmithy:= S.StatHouseTypeCountEx(playerId, htIronsmithy);
  result.Weaponsmithy:= S.StatHouseTypeCountEx(playerId, htWeaponsmithy);
  result.Armorsmithy:= S.StatHouseTypeCountEx(playerId, htArmorsmithy);
  result.Barracks:= S.StatHouseTypeCountEx(playerId, htBarracks);
  result.Store:= S.StatHouseTypeCountEx(playerId, htStore);
  result.WatchTower:= S.StatHouseTypeCountEx(playerId, htWatchTower);
  result.Fishermans:= S.StatHouseTypeCountEx(playerId, htFishermans);
  result.Market:= S.StatHouseTypeCountEx(playerId, htMarket);
  result.TownHall:= S.StatHouseTypeCountEx(playerId, htTownHall);
end;

function BH_ChangeBuildingsCountInfo(buildings: BH_BuildingsCountInfo; buildingType: TKMHouseType; count: integer): BH_BuildingsCountInfo;
begin

  result := buildings;

  case buildingType of
    htSchool:
      result.School := result.School + count;
    htInn:
      result.Inn := result.Inn + count;
    htQuarry:
      result.Quarry := result.Quarry + count;
    htWoodcutters:
      result.Woodcutters := result.Woodcutters + count;
    htSawmill:
      result.Sawmill := result.Sawmill + count;
    htFarm:
      result.Farm := result.Farm + count;
    htMill:
      result.Mill := result.Mill + count;
    htBakery:
      result.Bakery := result.Bakery + count;
    htSwine:
      result.Swine := result.Swine + count;
    htButchers:
      result.Butchers := result.Butchers + count;
    htVineyard:
      result.Vineyard := result.Vineyard + count;
    htGoldmine:
      result.Goldmine := result.Goldmine + count;
    htCoalmine:
      result.Coalmine := result.Coalmine + count;
    htMetallurgists:
      result.Metallurgists := result.Metallurgists + count;
    htWeaponworkshop:
      result.Weaponworkshop := result.Weaponworkshop + count;
    htTannery:
      result.Tannery := result.Tannery + count;
    htArmorworkshop:
      result.Armorworkshop := result.Armorworkshop + count;
    htStables:
      result.Stables := result.Stables + count;
    htIronmine:
      result.Ironmine := result.Ironmine + count;
    htIronsmithy:
      result.Ironsmithy := result.Ironsmithy + count;
    htWeaponsmithy:
      result.Weaponsmithy := result.Weaponsmithy + count;
    htArmorsmithy:
      result.Armorsmithy := result.Armorsmithy + count;
    htBarracks:
      result.Barracks := result.Barracks + count;
    htStore:
      result.Store := result.Store + count;
    htWatchTower:
      result.WatchTower := result.WatchTower + count;
    htFishermans:
      result.Fishermans := result.Fishermans + count;
    htMarket:
      result.Market := result.Market + count;
    htTownHall:
      result.TownHall := result.TownHall + count;
  end;
end;

function BH_ExtendBuildingsCountInfo(buildings: BH_BuildingsCountInfo; addingBuildings: array of BH_BuildingInfo) : BH_BuildingsCountInfo;
var
  i: integer;

begin

  result := buildings;

  for i:= 0 to High(addingBuildings) do
  begin
    result := BH_ChangeBuildingsCountInfo(result, addingBuildings[i].BuildingType, addingBuildings[i].Count);
  end;

end;

//BH_CitizensCountInfo

function BH_ChangeCitizensCountInfo(units: BH_CitizensCountInfo; unitType: TKMUnitType; count: integer): BH_CitizensCountInfo;
begin

  result := units;

  case unitType of
    utWoodcutter:
      result.Woodcutter := result.Woodcutter + count;
    utMiner:
      result.Miner := result.Miner + count;
    utAnimalBreeder:
      result.AnimalBreeder := result.AnimalBreeder + count;
    utFarmer:
      result.Farmer := result.Farmer + count;
    utCarpenter:
      result.Carpenter := result.Carpenter + count;
    utBaker:
      result.Baker := result.Baker + count;
    utButcher:
      result.Butcher := result.Butcher + count;
    utFisher:
      result.Fisher := result.Fisher + count;
    utStonemason:
      result.Stonemason := result.Stonemason + count;
    utSmith:
      result.Smith := result.Smith + count;
    utMetallurgist:
      result.Metallurgist := result.Metallurgist + count;
    utRecruit:
      result.Recruit := result.Recruit + count;

  end;
end;

function BH_BuildingsCountInfoToCitizensCountInfo(buildings: BH_BuildingsCountInfo): BH_CitizensCountInfo;
begin

  result.Woodcutter := buildings.Woodcutters;
  result.Miner := buildings.GoldMine + buildings.IronMine + buildings.CoalMine;
  result.AnimalBreeder := buildings.Swine + buildings.Stables;
  result.Farmer := buildings.Farm + buildings.Vineyard;
  result.Carpenter := buildings.Sawmill + buildings.WeaponWorkshop + buildings.ArmorWorkshop;
  result.Baker := buildings.Mill + buildings.Bakery;
  result.Butcher := buildings.Tannery + buildings.Butchers;
  result.Fisher := buildings.Fishermans;
  result.Stonemason := buildings.Quarry;
  result.Smith := buildings.WeaponSmithy + buildings.ArmorSmithy;
  result.Metallurgist := buildings.Metallurgists + buildings.IronSmithy;
  result.Recruit := buildings.WatchTower;

end;

//BH_Player

procedure BH_AddPlayerStrategy(playerId: integer; strategy: BH_BuildingStrategy);
var
  index: integer;

begin

  index := BH_FindPlayerIndex(playerId);
  if (index = -1) then
  begin
    BH_AddPlayer(playerId);
    index := High(BH_Players);
  end;

  BH_Players[index].BuildingStrategy := strategy;
end;

function BH_GetPlayerBuildingTypeIds(playerId: integer; buildingType: TKMHouseType): array of integer;
var
  playerIndex: integer;
  buildingIndex: integer;

begin

  result := [];
  playerIndex := BH_FindPlayerIndex(playerId);

  if (playerIndex = -1) then
  begin
    exit;
  end;

  buildingIndex := BH_FindBuildingInCollectionIndex(BH_Players[playerIndex].Buildings, buildingType);

  if (buildingIndex = -1) then
  begin
    exit;
  end;

  result := BH_Players[playerIndex].Buildings[buildingIndex].Ids;
end;

function BH_GetPlayerBuildingPlansLocations(playerId: integer; buildingType: TKMHouseType): array of TKMPoint;
var
  playerIndex: integer;
  buildingIndex: integer;

begin

  result := [];
  playerIndex := BH_FindPlayerIndex(playerId);

  if (playerIndex = -1) then
  begin
    exit;
  end;

  buildingIndex := BH_FindBuildingPlanInCollectionIndex(BH_Players[playerIndex].BuildingPlans, buildingType);

  if (buildingIndex = -1) then
  begin
    exit;
  end;

  result := BH_Players[playerIndex].BuildingPlans[buildingIndex].Locations;
end;

procedure BH_AddPlayerBuilding(playerId: integer; houseId: integer);
var
  playerIndex: integer;
  buildingIndex: integer;
  buildingType: TKMHouseType;
  count: integer;
begin

  playerIndex:= BH_FindPlayerIndex(playerId);

  if (playerIndex = -1) then
  begin
    exit;
  end;

  buildingType := S.HouseTypeEx(houseId);
  buildingIndex := BH_FindBuildingInCollectionIndex(BH_Players[playerIndex].Buildings, buildingType);

  if (buildingIndex = -1) then
  begin
    BH_Players[playerIndex].Buildings := BH_AddBuildingTypeToCollection(BH_Players[playerIndex].Buildings, buildingType);
    buildingIndex := High(BH_Players[playerIndex].Buildings);
  end;

  count := Length(BH_Players[playerIndex].Buildings[buildingIndex].Ids);
  setLength(BH_Players[playerIndex].Buildings[buildingIndex].Ids, count + 1);
  BH_Players[playerIndex].Buildings[buildingIndex].Ids[count] := houseId;
end;

procedure BH_RemovePlayerBuilding(playerId: integer; houseId: integer);
var
  playerIndex: integer;
  buildingIndex: integer;
  elementIndex: integer;
  buildingType: TKMHouseType;
begin

  playerIndex:= BH_FindPlayerIndex(playerId);

  if (playerIndex = -1) then
  begin
    exit;
  end;

  buildingType := S.HouseTypeEx(houseId);
  buildingIndex := BH_FindBuildingInCollectionIndex(BH_Players[playerIndex].Buildings, buildingType);

  if (buildingIndex = -1) then
  begin
    exit;
  end;

  elementIndex := BH_FindTIntegerArrayElementIndex(BH_Players[playerIndex].Buildings[buildingIndex].Ids, houseId);

  if (elementIndex <> -1) then
  begin
    BH_Players[playerIndex].Buildings[buildingIndex].Ids := U.ArrayRemoveIndexI(elementIndex, BH_Players[playerIndex].Buildings[buildingIndex].Ids);
  end;

end;

procedure BH_AddPlayerAdvice(playerId: integer; adviceId: string; color: BH_Color; showTime: integer);
var
  playerIndex: integer;
begin
  playerIndex:= BH_FindPlayerIndex(playerId);

  if (playerIndex = -1) then
  begin
    exit;
  end;

  BH_Players[playerIndex].Advices := BH_AddTips(BH_Players[playerIndex].Advices, adviceId, color, showTime, false);
end;

function BH_GetMaxPlayerPlannedBuildings(player: BH_Player; planning: boolean): integer;
var
  buildersCount: integer;

begin

  buildersCount := States.StatUnitTypeCountEx(player.Id, utBuilder);

  result := 2 + (buildersCount div 4);
  //if (buildersCount div 6 > 0) then
  //begin
  //  result := result + 1;
  //end;

  if (planning) then
  begin
    result := result + 1;
    if (result > 6) then
    begin
      result := 6;
    end;
  end;
end;

function BH_GetMaxPlayerPlannedBuildingsById(playerId: integer; planning : boolean): integer;
var
  index: integer;

begin

  index:= BH_FindPlayerIndex(playerId);

  if (index = -1)then
  begin
    exit;
  end;

  result := BH_GetMaxPlayerPlannedBuildings(BH_Players[index], planning);
end;

function BH_IsWareLocked(playerId: integer; wareType: TKMWareType): boolean;
var
  i: integer;
  ids: array of integer;

begin

  result := true;

  ids := BH_GetPlayerBuildingTypeIds(playerId, htSwine);

  for i:= 0 to High(ids) do
  begin
    if (S.HouseDeliveryBlocked(ids[i])) then
    begin
      continue;
    end;

    if (not S.HouseWareBlockedEx(ids[i], wareType)) then
    begin
      result := false;
      exit;
    end;
  end;
end;

//Get house type where this waretype can be created.
function BH_GetWareTypeHouseType(wareType: TKMWareType): TKMHouseType;
begin
  case wareType of
    wtTrunk: result := htWoodcutters;
    wtStone: result := htQuarry;
    wtTimber: result := htSawmill;
    wtIronOre: result := htIronMine;
    wtGoldOre: result := htGoldMine;
    wtCoal: result := htCoalMine;
    wtIron: result := htIronSmithy;
    wtGold: result := htMetallurgists;
    wtWine: result := htVineyard;
    wtCorn: result := htFarm;
    wtBread: result := htBakery;
    wtFlour: result := htMill;
    wtLeather: result := htTannery;
    wtSausage: result := htButchers;
    wtPig: result := htSwine;
    wtSkin: result := htSwine;
    wtWoodenShield: result := htArmorWorkshop;
    wtIronShield: result := htArmorSmithy;
    wtLeatherArmor: result := htArmorWorkshop;
    wtIronArmor: result := htArmorSmithy;
    wtAxe: result := htWeaponWorkshop;
    wtSword: result := htWeaponSmithy;
    wtLance: result := htWeaponWorkshop;
    wtPike: result := htWeaponSmithy;
    wtBow: result := htWeaponWorkshop;
    wtCrossbow: result := htWeaponSmithy;
    wtHorse: result := htStables;
    wtFish: result := htFishermans;
  end;
end;

function BH_GetPlayerPigsCount(playerId: integer): integer;
var
  i: integer;
  ids: array of integer;
begin

  result := 0;
  ids := BH_GetPlayerBuildingTypeIds(playerId, htSwine);

  for i:= 0 to High(ids) do
  begin
    result := result + S.HouseWareAmount(ids[i], wtPig);
  end;

  ids := BH_GetPlayerBuildingTypeIds(playerId, htStore);

  for i:= 0 to High(ids) do
  begin
    result := result + S.HouseWareAmount(ids[i], wtPig);
  end;
end;

function BH_GetPlayerResourceCount(playerId: integer; wareType: TKMWareType; checkSerfs: boolean): integer;
var
  i: integer;
  ids: array of integer;
begin

  ids := BH_GetPlayerBuildingTypeIds(playerId, htStore);

  for i:= 0 to High(ids) do
  begin
    result := result + S.HouseWareAmount(ids[i], wareType);
  end;

  ids := BH_GetPlayerBuildingTypeIds(playerId, BH_GetWareTypeHouseType(wareType));

  for i:= 0 to High(ids) do
  begin
    result := result + S.HouseWareAmount(ids[i], wareType);
  end;

  if (checkSerfs) then
  begin
    ids := S.PlayerGetAllUnits(playerId);

    for i:= 0 to High(ids) do
    begin
    end;
  end;
end;

function BH_GetPlayerSkinsCount(playerId: integer): integer;
var
  i: integer;
  ids: array of integer;

begin

  result := 0;
  ids := BH_GetPlayerBuildingTypeIds(playerId, htTannery);

  for i:= 0 to High(ids) do
  begin
    result := result + S.HouseWareAmount(ids[i], wtSkin);
  end;

  ids := BH_GetPlayerBuildingTypeIds(playerId, htStore);

  for i:= 0 to High(ids) do
  begin
    result := result + S.HouseWareAmount(ids[i], wtSkin);
  end;
end;

function BH_GetPlayerStartingFoodAmount(playerId: integer): BH_FoodAmountEnum;
var
  index: integer;

begin

  result := FA_VERY_LOW;
  index:= BH_FindPlayerIndex(playerId);

  if (index = -1)then
  begin
    exit;
  end;

  result := BH_Players[index].StartingFoodAmount;
end;

function BH_GetPlayerConnectedHousePlansCount(playerId: integer; buildingType: TKMHouseType): integer;
var
  i: integer;
  locations: array of TKMPoint;

begin

  result := 0;
  locations := BH_GetPlayerBuildingPlansLocations(playerId, buildingType);

  for i := 0 to High(Locations) do
  begin

    if (BH_MapTilesInfo[locations[i].X][locations[i].Y + 1].RoadConnectionType <> RCT_Null) then
    begin
      Inc(result);
    end;
  end;

end;

function BH_IsWareLockedAtPlayerStorehouses(playerId: integer; wareType: TKMWareType): boolean;
var
  index: integer;
  ids: array of integer;
  i: integer;

begin

  result := true;
  index := BH_FindPlayerIndex(playerId);

  if (index = -1) then
  begin
    exit;
  end;

  ids := BH_GetPlayerBuildingTypeIds(playerId, htStore);

  for i:= 0 to High(ids) do
  begin

    if (not S.HouseWareBlockedEx(ids[i], wareType))then
    begin

      result := false;
      exit;
    end;
  end;

end;

function BH_ArePlayerHousesLocked(playerId: integer; houseType: TKMHouseType): boolean;
var
  index: integer;
  ids: array of integer;
  i: integer;

begin

  result := true;
  index := BH_FindPlayerIndex(playerId);

  if (index = -1) then
  begin
    exit;
  end;

  ids := BH_GetPlayerBuildingTypeIds(playerId, houseType);

  for i:= 0 to High(ids) do
  begin

    if (not S.HouseDeliveryBlocked(ids[i]))then
    begin

      result := false;
      exit;
    end;
  end;

end;

//TODO remove when HouseSchoolQueueEx will be implemented.
function BH_GetUnitType(unitType: integer) : TKMUnitType;
begin
  case unitType of
    0: result := utSerf;
    1: result := utWoodcutter;
    2: result := utMiner;
    3: result := utAnimalBreeder;
    4: result := utFarmer;
    5: result := utCarpenter;
    6: result := utBaker;
    7: result := utButcher;
    8: result := utFisher;
    9: result := utBuilder;

    10: result := utStonemason;
    11: result := utSmith;
    12: result := utMetallurgist;
    13: result := utRecruit;
    14: result := utMilitia;
    15: result := utAxefighter;
    16: result := utSwordfighter;
    17: result := utBowman;
    18: result := utCrossbowman;
    19: result := utLanceCarrier;

    20: result := utPikeman;
    21: result := utScout;
    22: result := utKnight;
    23: result := utBarbarian;
    24: result := utRebel;
    25: result := utRogue;
    26: result := utWarrior;
    27: result := utVagabond;

    30: result := utWolf;
    31: result := utFish;
    32: result := utWatersnake;
    33: result := utSeastar;
    34: result := utCrab;
    35: result := utWaterflower;
    36: result := utWaterleaf;
    37: result := utDuck;
    else
      result := utNone;
  end;
end;

procedure BH_RefreshTips(playerIndex: integer);
var
  i: integer;

begin

  for i:= 0 to Length(BH_Players[playerIndex].Advices) - 1 do
  begin
    Dec(BH_Players[playerIndex].Advices[i].ShowTime);
    if ((BH_Players[playerIndex].Advices[i].ShowTime <= 0) and (not BH_Players[playerIndex].Advices[i].OneTimeAdvice)) then
    begin
      BH_Players[playerIndex].Advices := BH_RemoveTips(BH_Players[playerIndex].Advices, BH_Players[playerIndex].Advices[i].Id);
      Dec(i);
    end;
  end;
end;

//String functions.
function BH_GetBuildingStrategyString(strategy: BH_BuildingStrategy): string;
begin
  case strategy of
    BS_Default35, BS_Default_60:
      result := 'Default';
    BS_IronStoring_60:
      result := 'BS_IronStoring_60';
  end;
end;

function BH_GetBuildingsInfoString(buildings: array of BH_BuildingInfo):string;
var
  i: integer;
begin

  for i:= 0 to High(buildings) do
  begin
    result := result + S.HouseTypeNameEx(buildings[i].BuildingType) + '  ' + IntToStr(buildings[i].Count) + '|';
  end;

end;

function BH_GetBuildingsCollectionString(buildings: array of BH_BuildingCollection):string;
var
  i: integer;
begin

  for i:= 0 to High(buildings) do
  begin
    result := result + S.HouseTypeNameEx(buildings[i].BuildingType) + '  ' + IntToStr(Length(buildings[i].ids)) + '|';
  end;
end;

function BH_GetTIntegerArrayCollectionString(arr: TIntegerArray):string;
var
  i: integer;
begin

  for i:= 0 to High(arr) do
  begin
    result := result + IntToStr(arr[i]) + ',';
  end;
end;

function BH_GetPointsCollectionString(points: array of TKMPoint): string;
var
  i: integer;
begin

  for i:= 0 to High(points) do
  begin
    result := result + '(' + IntToStr(points[i].X) + ';' + IntToStr(points[i].Y) + ') ';
    if ((i<>0) and (i mod 20 = 0)) then
    begin
      result := result + '|';
    end;
  end;

end;

function BH_GetDebugOverlayString(playerIndex: integer): string;
var
  i: integer;

begin

  if (BH_DebugBuildingsFlag)  then
  begin
    result := result + 'Buildings collection: |' + BH_GetBuildingsCollectionString(BH_Players[playerIndex].Buildings);
  end;

  if (BH_DebugBuildingsPlansFlag) then
  begin
    for i:= 0 to High(BH_Players[playerIndex].BuildingPlans) do
    begin
      result := result + 'Player house plans: ' + S.HouseTypeNameEx(BH_Players[playerIndex].BuildingPlans[i].BuildingType) + ' ' + BH_GetPointsCollectionString(BH_Players[playerIndex].BuildingPlans[i].Locations) + '|';
    end;
  end;

  //Global mines info.

  if (BH_DebugMinesFlag) then
  begin
    result := result + 'Iron mines: |' + BH_GetPointsCollectionString(BH_IronMinesLocations) + '|';
    result := result + 'Gold mines: |' + BH_GetPointsCollectionString(BH_GoldMinesLocations) + '|';

    result := result + 'Iron conflicts: |';
    for i:= 0 to High(BH_IronMinesConflicts) do
    begin
      result := result + BH_GetPointsCollectionString(BH_IronMinesConflicts[i])+ '|';
    end;

    result := result + 'Gold conflicts: |';

    for i:= 0 to High(BH_GoldMinesConflicts) do
    begin
      result := result + BH_GetPointsCollectionString(BH_GoldMinesConflicts[i]) + '|';
    end;


  //Player mines info.
    result := result + 'Player iron mines: |' + BH_GetPointsCollectionString(BH_Players[playerIndex].CloseIronMinesLocations) + '|';
    result := result + IntToStr(BH_Players[playerIndex].PossibleIronMinesCount) + '|';
    result := result + 'Player gold mines: |' + BH_GetPointsCollectionString(BH_Players[playerIndex].CloseGoldMinesLocations) + '|';
    result := result + IntToStr(BH_Players[playerIndex].PossibleGoldMinesCount) + '|';
  end;

  if (BH_DebugFishFlag) then
  begin
    result:= result + 'Possible fisharmans ' + IntToStr(BH_Players[playerIndex].PossibleFishermansCount) + '|';
    result:= result + 'Close water: ';
    for i:= 0 to High(BH_Players[playerIndex].CloseFishWaterIds) do
    begin
      result := result + IntToStr(BH_Players[playerIndex].CloseFishWaterIds[i]) + ' ';
    end;
  end;

  if (BH_DebugWaterFlag) then
  begin
    for i:= 0 to High(BH_FishWater) do
    begin
      result := result + 'WaterId ' + IntToStr(BH_FishWater[i].Id) + ' Fish ' + BH_GetTIntegerArrayCollectionString(BH_FishWater[i].Fish) + ' Fishermans ' + BH_GetTIntegerArrayCollectionString(BH_FishWater[i].Fishermans) +'|';
      result := result + 'Borders ' + BH_GetPointsCollectionString(BH_FishWater[i].Borders)+ '|';
    end;
  end;

end;

function BH_GetColor(color: BH_Color): string;
begin
  case color of
    Color_White:
      result := '[$FFFFFF]';
    Color_Green:
      result := '[$00FF00]';
    Color_Yellow:
      result := '[$00FFFF]';
    Color_Red:
      result := '[$0000FF]';
    Color_Blue:
      result := '[$FF0000]';
  end;
end;

procedure BH_SwitchDebugFlag(aHandID: Integer; flagName: string);
begin

  case flagName of
    'Buildings' :
      BH_DebugBuildingsFlag := not BH_DebugBuildingsFlag;
    'Plans' :
      BH_DebugBuildingsPlansFlag := not BH_DebugBuildingsPlansFlag;
    'Mines' :
      BH_DebugMinesFlag := not BH_DebugMinesFlag;
    'Water' :
      BH_DebugWaterFlag := not BH_DebugWaterFlag;
    'Fish' :
      BH_DebugFishFlag := not BH_DebugFishFlag;
  end;
end;

//----------------------------------------------------------------------------------------------------------------------------------------------------
//EVENTS.
//----------------------------------------------------------------------------------------------------------------------------------------------------

procedure BH_OnHouseBuiltCore(aHouse: integer);
var
  index: integer;
  ownerId: integer;

begin
  ownerId := S.HouseOwner(aHouse);
  BH_AddPlayerBuilding(ownerId, aHouse);

  if (S.HouseTypeEx(aHouse) = htFarm) then
  begin

    index := BH_FindPlayerIndex(ownerId);
    if ((index <> -1) and (BH_Players[index].FirstFarmTime = 0)) then
    begin
      BH_Players[index].FirstFarmTime := S.GameTime;
    end;

  end;
end;

procedure BH_OnHouseDestroyedCore(aHouse: integer; aDestroyerIndex: integer);
begin
  BH_RemovePlayerBuilding(S.HouseOwner(aHouse), aHouse);
end;

procedure BH_OnMissionStartCore;
var
  i: integer;
  index: integer;
  playerId: integer;
  ids: array of integer;
  foodAmount: single;
  timberAmount: integer;

begin

  if (BH_GlobalBuildingStrategy = BS_Null) then
  begin
    BH_GlobalBuildingStrategy := BS_Default_60;
  end;

  A.LogLinesMaxCnt(5000);

  for playerId:= 0 to S.LocationCount - 1 do
  begin

    if (not S.PlayerEnabled(playerId) or S.PlayerIsAI(playerId)) then
    begin
      continue;
    end;

    //if (not S.PlayerEnabled(playerId)) then
    //begin
    //  continue;
    //end;

    index := BH_FindPlayerIndex(playerId);

    if (index = -1) then
    begin
      BH_AddPlayer(playerId);
      index := High(BH_Players);
    end;

    ids := S.PlayerGetAllHouses(playerId);

    foodAmount := 0;
    timberAmount := 0;

    for i:= 0 to High(ids) do
    begin
      BH_AddPlayerBuilding(playerId, ids[i]);

      if (S.HouseTypeEx(ids[i]) = htStore) then
      begin
        timberAmount := S.HouseWareAmount(ids[i], wtTimber);
        foodAmount := S.HouseWareAmount(ids[i], wtSausage) * BH_Sausage + foodAmount;
        foodAmount := S.HouseWareAmount(ids[i], wtFish) * BH_Fish + foodAmount;
        foodAmount := S.HouseWareAmount(ids[i], wtBread) * BH_Bread + foodAmount;
        foodAmount := S.HouseWareAmount(ids[i], wtWine) * BH_Wine + foodAmount;
      end;

      BH_UpdatePlayerMinesInfo(playerId, S.HousePosition(ids[i]));
    end;

    if (foodAmount <= 27) then
    begin
      BH_Players[index].StartingFoodAmount := FA_VERY_LOW;
    end else
    if (foodAmount < 36) then
    begin
      BH_Players[index].StartingFoodAmount := FA_LOW;
    end else
    if (foodAmount < 45) then
    begin
      BH_Players[index].StartingFoodAmount := FA_OK;
    end else
    if (foodAmount < 54) then
    begin
      BH_Players[index].StartingFoodAmount := FA_HIGH;
    end else
    begin
      BH_Players[index].StartingFoodAmount := FA_VERY_HIGH;
    end;

    if (foodAmount < 34) then
    begin
      BH_Players[index].StartingTimberAmount := TA_VERY_LOW;
    end else
    if (foodAmount < 37) then
    begin
      BH_Players[index].StartingTimberAmount := TA_LOW;
    end else
    if (foodAmount < 40) then
    begin
      BH_Players[index].StartingTimberAmount := TA_OK;
    end else
    if (foodAmount < 43) then
    begin
      BH_Players[index].StartingTimberAmount := TA_HIGH;
    end else
    begin
      BH_Players[index].StartingTimberAmount := TA_VERY_HIGH;
    end;

    if (not S.PlayerHouseTypeCanBuild(playerId, htInn)) then
    begin
      BH_Players[index].IsSlowBuildOrder := true;
    end;

    //TODO move from core.
    BH_Players[index].Advices := BH_AddTips(BH_Players[index].Advices, '<$0>', Color_White, 60, true);
  end;

  //TODO. Move to BuildHelperTerrain. BH_Players is not created at the moment when OnMissionStart in terrain file is invoked.
  BH_FillStartingFishermans();

end;

procedure BH_OnTickCore;
var

  i: integer;
begin

  if (S.GameTime mod BH_Seconds = 0) then
  begin
    for i:= 0 to High(BH_Players) do
    begin
      BH_RefreshTips(i);
    end;
  end;
end;

{$ENDIF}
