{$IFNDEF DEBUG}
  {$DEFINE DEBUG}
{$ENDIF}

{$IFNDEF BuildHelper60DoubleStable}
{$DEFINE BuildHelper60DoubleStable}

{$IFDEF DEBUG}

  {$IFNDEF BuildHelperCore}
    {$INCLUDE BuildHelperCore.script}
  {$ENDIF}

  {$IFNDEF BuildHelper60Default}
    {$INCLUDE BuildHelper60Default.script}
  {$ENDIF}
{$ENDIF}

//----------------------------------------------------------------------------------------------------------------------------------------------------
//ADDING PLANNED BUILDINGS FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------

function BH_Default60_AddSawmills(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htSawmill)) then
  begin
    if (planning) then
    begin
      if ((buildings.Woodcutters > 0) and (buildings.Quarry > 1)) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    end;

    exit;
  end;

  case buildings.Sawmill of
    0:
      if ((buildings.Woodcutters > 0) and (buildings.Quarry > 1)) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    1:
      if ((buildings.Woodcutters > 2) and (buildings.GoldMine > 0)) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    2:
      if (buildings.GoldMine > 1) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    //TODO. Think when to make 4th.
    3:
      if (buildings.Farm > 5) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
    4:
      if (buildings.Woodcutters > 8) then
      begin
        result := BH_AddBuildingInfo(result, htSawmill);
      end;
  end;
end;

function BH_Default60_AddCoalMines(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htCoalMine)) then
  begin
    if (planning) then
    begin
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
    end;

    exit;
  end;

  case buildings.CoalMine of
    0:
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
    1,2,3,4,5,6:
      begin
        if ((buildings.Inn > 0) and (buildings.Sawmill > 1) and (buildings.Farm > 1)) then
        begin
          Inc(needToBuild);
        end;

        if ((buildings.Metallurgists > 0) and (buildings.Woodcutters >= 5) and (buildings.Farm > 1)) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.IronMine > 0) then
        begin
          Inc(needToBuild);
          Inc(needToBuild);
        end;

        if (buildings.IronSmithy > 0) then
        begin
          Inc(needToBuild);
        end;

        if ((buildings.ArmorSmithy + buildings.WeaponSmithy) > 1) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htCoalMine, needToBuild - buildings.CoalMine + 1 , maxBuildingsCount);
      end;
    7:
      //TODO think about it. Not sure.
      if (buildings.Farm > 5) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
    8,9:
      begin
        if ((buildings.Barracks > 0) and (buildings.Tannery > 0) and (buildings.IronSmithy > 2)) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.WeaponSmithy > 0) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htCoalMine, needToBuild - buildings.CoalMine + 8, maxBuildingsCount);
      end;

    10:
      if (buildings.ArmorWorkshop > 3) then
      begin
        result := BH_AddBuildingInfo(result, htCoalMine);
      end;
    11,12:
      if (buildings.IronMine > 4) then
      begin
        result := BH_AddMultipleBuildingInfo(result, htCoalMine, 13 - buildings.CoalMine, maxBuildingsCount);
      end;
    13,14:
      if (buildings.IronMine > 5) then
      begin
        result := BH_AddMultipleBuildingInfo(result, htCoalMine, 15 - buildings.CoalMine, maxBuildingsCount);
      end;

    //TODO last one.

  end;
end;

function BH_Default60_AddFarms(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htFarm)) then
  begin
    if (planning) then
    begin
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htFarm);
      end;
    end;

    exit;
  end;

  case buildings.Farm of
    0:
      if (buildings.Sawmill > 0) then
      begin
        result := BH_AddBuildingInfo(result, htFarm);
      end;
    1,2,3,4,5,6:
      begin

        if ((buildings.Woodcutters >= 4) and (buildings.Metallurgists > 0)) then
        begin
          Inc(needToBuild);
        end;

        if ((player.StartingFoodAmount = FA_VERY_LOW) or (player.StartingFoodAmount = FA_LOW)) then
        begin
          if (buildings.Farm > 0) then
          begin
            Inc(needToBuild);
          end;

        end else
        if ((buildings.Woodcutters >= 6) and (buildings.Metallurgists > 0)) then
        begin
          Inc(needToBuild);
        end;

        if ((player.StartingFoodAmount = FA_VERY_LOW) or (player.StartingFoodAmount = FA_LOW)) then
        begin
          if ((buildings.Farm > 2) and (buildings.Mill > 0)) then
          begin
            Inc(needToBuild);
          end;
        end else
        if (buildings.Swine > 0) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Coalmine > 4) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.ArmorSmithy > 1) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.IronSmithy > 1) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htFarm, needToBuild - buildings.Farm + 1, maxBuildingsCount);
      end;

    7,8:
      begin

        if ((buildings.Metallurgists > 2)  or (buildings.GoldMine > 2)) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.School > 2) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htFarm, needToBuild - buildings.Farm + 7, maxBuildingsCount);
      end;
  end;
end;

function BH_Default60_AddSwineFarms(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htSwine)) then
  begin
    exit;
  end;

  case buildings.Swine of
    0:
      begin
        if ((player.StartingFoodAmount = FA_VERY_LOW) and (buildings.Fishermans = 0)) then
        begin
          if ((buildings.Mill > 0) and (buildings.Farm > 2)) then
          begin
              result := BH_AddBuildingInfo(result, htSwine);
          end;
          exit;
        end;

        if (planning) then
        begin
          if (((S.GameTime - player.FirstFarmTime > 7 * BH_Minutes) and (S.GameTime - player.FirstFarmTime < 8 * BH_Minutes)) or (buildings.Farm > 2)) then
          begin
            result := BH_AddBuildingInfo(result, htSwine);
          end;
          exit;
        end;

        if ((S.GameTime - player.FirstFarmTime > 8 * BH_Minutes) or (buildings.Farm > 2)) then
        begin
          result := BH_AddBuildingInfo(result, htSwine);
        end;
      end;
    1:
      begin

      if ((player.StartingFoodAmount = FA_VERY_LOW) or
         ((player.StartingFoodAmount = FA_LOW) and (buildings.Fishermans = 0))) then
        begin

          if ((buildings.Mill > 0) and (buildings.Farm > 3)) then
          begin
            result := BH_AddBuildingInfo(result, htSwine);
          end;

          exit;
        end;

        result := BH_AddBuildingInfo(result, htSwine);
      end;
    2:
      begin
        if ((player.StartingFoodAmount = FA_VERY_LOW) or (player.StartingFoodAmount = FA_LOW) or
           ((player.StartingFoodAmount = FA_OK) and (buildings.Fishermans = 0))) then
        begin

          if ((buildings.Mill > 0) and (buildings.Farm > 4)) then
          begin
            result := BH_AddBuildingInfo(result, htSwine);
          end;

          exit;
        end;

        if (buildings.Farm > 4) then
        begin
          result := BH_AddBuildingInfo(result, htSwine);
        end;
      end;
    3:
      if (buildings.Farm > 8) then
      begin
        result := BH_AddBuildingInfo(result, htSwine);
      end;
  end;
end;

function BH_Default60_AddStables(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htStables)) then
  begin
    exit;
  end;

  //Make stable after mill for maps with low food.
  if (player.StartingFoodAmount = FA_VERY_HIGH) then
  begin

    if ((buildings.Stables = 0) and (buildings.Farm > 5) and (buildings.Swine > 2)) then
    begin
      result := BH_AddBuildingInfo(result, htStables);
    end;
  end else

  if ((player.StartingFoodAmount = FA_HIGH) and (buildings.Fishermans > 0)) then
  begin
    if ((buildings.Stables = 0) and (buildings.Farm > 5) and (buildings.Swine > 2)) then
    begin
      result := BH_AddBuildingInfo(result, htStables);
    end;
  end else

  begin

    if ((buildings.Stables = 0) and (buildings.Farm > 6) and (buildings.Swine > 2) and (buildings.Mill > 0)) then
    begin
      result := BH_AddBuildingInfo(result, htStables);
    end;
  end;

end;

function BH_Default60_AddMills(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htMill)) then
  begin
    exit;
  end;

  //We plan to make only 1 bakery.
  if (buildings.Mill > 0) then
  begin
    exit;
  end;

  if ((player.StartingFoodAmount = FA_VERY_HIGH) or ((player.StartingFoodAmount = FA_HIGH) and (buildings.Fishermans > 0))) then
  begin

    if (buildings.WeaponSmithy < 2) then
    begin
      exit;
    end;
  end;

  case player.StartingFoodAmount of
    FA_VERY_LOW:
      if (buildings.Fishermans = 0) then
      begin

        if ((buildings.Inn > 0) and (buildings.Farm > 1)) then
        begin
          result := BH_AddBuildingInfo(result, htMill);
        end;
      end else
      begin

        if ((buildings.Farm > 2) and (buildings.Swine > 0)) then
        begin
          result := BH_AddBuildingInfo(result, htMill);
        end;
      end;

    FA_LOW:
      if (buildings.Fishermans = 0) then
      begin

        if ((buildings.Farm > 2) and (buildings.Swine > 0)) then
        begin
          result := BH_AddBuildingInfo(result, htMill);
        end;
      end else
      begin

        if ((buildings.Farm > 3) and (buildings.Swine > 1)) then
        begin
          result := BH_AddBuildingInfo(result, htMill);
        end;
      end;

    FA_OK:
      if (buildings.Fishermans = 0) then
      begin

        if ((buildings.Farm > 3) and (buildings.Swine > 1)) then
        begin
          result := BH_AddBuildingInfo(result, htMill);
        end;
      end else
      begin

        if ((buildings.Farm > 5) and (buildings.Swine > 2)) then
        begin
          result := BH_AddBuildingInfo(result, htMill);
        end;
      end;

    FA_HIGH:

      if (buildings.Fishermans = 0) then
      begin

        if ((buildings.Farm > 5) and (buildings.Swine > 2)) then
        begin
          result := BH_AddBuildingInfo(result, htMill);
        end;
      end else
      begin

        if ((buildings.Stables > 0) and (buildings.Farm > 6) and (buildings.Swine > 2)) then
        begin
          result := BH_AddBuildingInfo(result, htMill);
        end;
      end;

    FA_VERY_HIGH:
      if ((buildings.Stables > 0) and (buildings.Farm > 6) and (buildings.Swine > 2)) then
      begin
        result := BH_AddBuildingInfo(result, htMill);
      end;
  end;
end;

function BH_Default60_AddTanneries(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htTannery)) then
  begin
    exit;
  end;

  case buildings.Tannery of
    0:
      if ((buildings.Farm > 5) and (buildings.Swine > 2)) then
      begin
        result := BH_AddBuildingInfo(result, htTannery);
      end else
      begin
        if (planning and (S.StatResourceProducedCountEx(player.Id, wtSkin) > 2) or (BH_GetPlayerSkinsCount(player.Id) > 0)) then
        begin
          result := BH_AddBuildingInfo(result, htTannery);
        end else
        if ((buildings.Barracks > 0) and ((S.StatResourceProducedCountEx(player.Id, wtSkin) > 3) or (BH_GetPlayerSkinsCount(player.Id) > 0))) then
        begin
          result := BH_AddBuildingInfo(result, htTannery);
        end
      end;
    1:
      if (buildings.ArmorWorkshop > 0) then
      begin
        result := BH_AddBuildingInfo(result, htTannery);
      end;

  end;
end;

function BH_Default60_AddWeaponWorkshops(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htWeaponWorkshop)) then
  begin
    exit;
  end;

  case buildings.WeaponWorkshop of
    0,1:
      begin

        if (buildings.Farm > 5) then
        begin
          Inc(needToBuild);
        end;

        if (buildings.Farm > 6) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htWeaponWorkshop, needToBuild - buildings.WeaponWorkshop, maxBuildingsCount);
      end;
    2:
      if ((buildings.ArmorWorkshop > 1) or (buildings.Tannery > 1)) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponWorkshop);
      end;
    3:
      if (buildings.Woodcutters > 8) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponWorkshop);
      end;
  end;
end;

function BH_Default60_AddArmorWorkshops(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
var
  needToBuild: integer;

begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htArmorWorkshop)) then
  begin
    exit;
  end;

  case buildings.ArmorWorkshop of
    0,1:
      if (buildings.Tannery > 0) then
      begin
        result := BH_AddMultipleBuildingInfo(result, htArmorWorkshop, 2 - buildings.ArmorWorkshop, maxBuildingsCount);
      end;
    2,3,4:
      begin

        if ((buildings.Tannery > 0) and (buildings.Sawmill > 3)) then
        begin
          Inc(needToBuild);
          Inc(needToBuild);
        end;

        if (buildings.Tannery > 1) then
        begin
          Inc(needToBuild);
        end;

        result := BH_AddMultipleBuildingInfo(result, htArmorWorkshop, needToBuild - buildings.ArmorWorkshop + 2, maxBuildingsCount);

      end;
  end;
end;

function BH_Default60_AddFishers(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (Length(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if ((buildings.Fishermans = 0) and (buildings.Woodcutters >= 5) and (buildings.Metallurgists > 0) and (buildings.Inn > 0)) then
  begin
    result := BH_AddBuildingInfo(result, htFishermans);
  end;
end;

function BH_Default60_AddIronMines(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htIronMine)) then
  begin
    exit;
  end;

  if (player.PossibleIronMinesCount = 0) then
  begin
    exit;
  end;

  case buildings.IronMine of

    0:
      if ((buildings.Metallurgists > 0) and (buildings.Woodcutters >= 5) and (buildings.Farm > 1)) then
      begin
        result := BH_AddBuildingInfo(result, htIronMine);
      end;
    1:
      if (buildings.IronMine > 0) then
      begin
        result := BH_AddBuildingInfo(result, htIronMine);
      end;
    2:
      if ((buildings.ArmorSmithy + buildings.WeaponSmithy) > 1) then
      begin
        result := BH_AddBuildingInfo(result, htIronMine);
      end;
    3:
      if (buildings.IronSmithy > 2) then
      begin
        result := BH_AddBuildingInfo(result, htIronMine);
      end;
    4:
      result := BH_AddBuildingInfo(result, htIronMine);
    5:
      result := BH_AddBuildingInfo(result, htIronMine);
  end;
end;

function BH_Default60_AddIronSmithies(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htIronSmithy)) then
  begin
    if (planning) then
    begin
      if (buildings.IronMine > 0) then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
    end;

    exit;
  end;

  case buildings.IronSmithy of
    0:
      if (buildings.IronMine > 0) then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
    1:
      if ((buildings.ArmorSmithy + buildings.WeaponSmithy) > 1) then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
    2:
      //TODO think about it. Not sure.
      if (buildings.Farm > 5) then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
    3:
      if (buildings.IronMine > 4) then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
    4:
      if (buildings.IronMine > 5) then
      begin
        result := BH_AddBuildingInfo(result, htIronSmithy);
      end;
  end;
end;

function BH_Default60_AddArmorSmithies(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htArmorSmithy)) then
  begin
    if (planning) then
    begin
      if (buildings.IronSmithy > 0) then
      begin
        result := BH_AddMultipleBuildingInfo(result, htArmorSmithy, 2, maxBuildingsCount);
      end;
    end;

    exit;
  end;

  if ((buildings.ArmorSmithy < 2) and (buildings.IronSmithy > 0)) then
  begin
    result := BH_AddMultipleBuildingInfo(result, htArmorSmithy, 2 - buildings.ArmorSmithy, maxBuildingsCount);
  end;

  if ((buildings.ArmorSmithy >= 2) and (buildings.IronSmithy > 3) and (buildings.IronMine > 4)) then
  begin
    result := BH_AddBuildingInfo(result, htArmorSmithy);
  end;

end;

function BH_Default60_AddWeaponSmithies(addedBuildings: array of BH_BuildingInfo; buildings: BH_BuildingsCountInfo; player: BH_Player; maxBuildingsCount: integer; planning: boolean): array of BH_BuildingInfo;
begin

  result := addedBuildings;

  if (BH_GetAllBuildingsCount(result) >= maxBuildingsCount) then
  begin
    exit;
  end;

  if (not S.PlayerHouseTypeCanBuild(player.Id, htWeaponSmithy)) then
  begin
    exit;
  end;

  case buildings.WeaponSmithy of

    0:
      if ((buildings.Barracks > 0) and (buildings.Tannery > 0) and (buildings.IronSmithy > 2)) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponSmithy);
      end;
    1:
      result := BH_AddBuildingInfo(result, htWeaponSmithy);
    2:
      if ((buildings.IronSmithy > 4) and (buildings.IronMine > 4)) then
      begin
        result := BH_AddBuildingInfo(result, htWeaponSmithy);
      end;
  end;
end;


//----------------------------------------------------------------------------------------------------------------------------------------------------
//SLOW ORDER PLANNED BUILDINGS FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------------------------------------
//ADVICES FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------------------------------------------------------
//PLANNED BUILDINGS FUNCTIONS.
//----------------------------------------------------------------------------------------------------------------------------------------------------


function BH_DoubleStable60_Slow_GetPlannedHouses(player: BH_Player; buildings: BH_BuildingsCountInfo; planning: boolean): array of BH_BuildingInfo;
var
  maxBuildingsCount: integer;

begin
  maxBuildingsCount := BH_GetMaxPlayerPlannedBuildings(player, planning);

  result := BH_Default60_Slow_AddInns(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddSchools(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddTowers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddButchers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_Slow_AddFishers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddGoldMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_Slow_AddSawmills(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_Slow_AddStartingWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddAdditionalWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddIronMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddCoalMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddMetallurgists(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddLowPrioritySchools(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_Slow_AddFarms(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddBarracks(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddArmorSmithies(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddWeaponSmithies(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddIronSmithies(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddArmorWorkshops(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddWeaponWorkshops(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddTanneries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddSwineFarms(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddStables(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddBakeries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddMills(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddMarkets(result, buildings, player, maxBuildingsCount, planning);
  //For slow build orders we want to make all quarries right at start.
  result := BH_Default60_Slow_AddQuarries(result, buildings, player, 99, planning);

end;

function BH_DoubleStable60_GetPlannedHouses(player: BH_Player; buildings: BH_BuildingsCountInfo; planning: boolean): array of BH_BuildingInfo;
var
  maxBuildingsCount: integer;

begin

  if (player.IsSlowBuildOrder) then
  begin
    result := BH_Default60_Slow_GetPlannedHouses(player, buildings, planning);
    exit;
  end;

  maxBuildingsCount := BH_GetMaxPlayerPlannedBuildings(player, planning);

  result := BH_Default60_AddInns(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddSchools(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddTowers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddButchers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddFishers(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddGoldMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddSawmills(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddStartingWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddAdditionalWoodcutters(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddIronMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddCoalMines(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddMetallurgists(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddLowPrioritySchools(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddFarms(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddBarracks(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddArmorSmithies(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddWeaponSmithies(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddIronSmithies(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddArmorWorkshops(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddWeaponWorkshops(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddTanneries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddSwineFarms(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddStables(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddBakeries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddMills(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddQuarries(result, buildings, player, maxBuildingsCount, planning);
  result := BH_Default60_AddMarkets(result, buildings, player, maxBuildingsCount, planning);

end;

{$ENDIF}