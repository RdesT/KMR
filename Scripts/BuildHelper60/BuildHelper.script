{$INCLUDE BuildHelperCore.script}
{$INCLUDE BuildHelperStrategy.script}
{$INCLUDE BuildHelper60Default.script}
{$INCLUDE BuildHelper60IronStoring.script}
{$INCLUDE BuildHelper60LeatherOnly.script}
{$INCLUDE BuildHelper35Default.script}

{$EVENT evtTick:BH_OnTick}
{$EVENT evtMissionStart:BH_OnMissionStart}

var
  currentPlayerIndex: integer;

function BH_GetWeaponBuildingOrdersTips(playerId: integer): string;
var
  i: integer;
  ids: array of integer;

begin

  ids := BH_GetPlayerBuildingTypeIds(playerId, htWeaponworkshop);
  for i:= 0 to High(ids) do
  begin

    if ((S.HouseWeaponsOrderedEx(ids[i], wtBow) = 0) and
        (S.HouseWeaponsOrderedEx(ids[i], wtAxe) = 0) and
        (S.HouseWeaponsOrderedEx(ids[i],  wtLance) = 0))then
    begin
      result := result + '[$00FFFF]<$103> :' + S.HouseTypeNameEx(htWeaponworkshop) + '|';
    end;
  end;

  ids := BH_GetPlayerBuildingTypeIds(playerId, htArmorworkshop);
  for i:= 0 to High(ids) do
  begin
    if ((S.HouseWeaponsOrderedEx(ids[i], wtLeatherArmor) = 0) and
        (S.HouseWeaponsOrderedEx(ids[i], wtWoodenShield) = 0))then
    begin
      result := result + '[$00FFFF]<$103> :' + S.HouseTypeNameEx(htArmorworkshop) + '|';
    end;
  end;

  ids := BH_GetPlayerBuildingTypeIds(playerId, htWeaponsmithy);
  for i:= 0 to High(ids) do
  begin

    if ((S.HouseWeaponsOrderedEx(ids[i], wtSword) = 0) and
        (S.HouseWeaponsOrderedEx(ids[i], wtPike) = 0) and
        (S.HouseWeaponsOrderedEx(ids[i],  wtCrossbow) = 0))then
    begin
      result := result + '[$00FFFF]<$103> :' + S.HouseTypeNameEx(htWeaponsmithy) + '|';
    end;
  end;

  ids := BH_GetPlayerBuildingTypeIds(playerId, htArmorsmithy);
  for i:= 0 to High(ids) do
  begin

    if ((S.HouseWeaponsOrderedEx(ids[i], wtIronShield) = 0) and
        (S.HouseWeaponsOrderedEx(ids[i], wtIronArmor) = 0))then
    begin
      result := result + '[$00FFFF]<$103> :' + S.HouseTypeNameEx(htArmorsmithy) + '|';
    end;

  end;
end;

function BH_AddSchoolMissingOrders(playerId: integer; count: integer; unitType: TKMUnitType): string;
var
  playerUnitCount: integer;

begin

  playerUnitCount := S.StatUnitTypeCountEx(playerId, unitType);

  if (count > playerUnitCount) then
  begin
    result := '[$0000FF]<$102> ' + S.UnitTypeNameEx(unitType) + ': ' + IntToStr(count - playerUnitCount) + '|';
  end;

end;

function BH_GetOrdersInBuildingsAdvices(playerId: integer; buildings: BH_BuildingsCountInfo): string;
var
  i: integer;
  queueIndex: integer;
  unitType: TKMUnitType;
  unitsCount: BH_CitizensCountInfo;
  ids: array of integer;

begin

  unitsCount := BH_BuildingsCountInfoToCitizensCountInfo(buildings);
  ids := BH_GetPlayerBuildingTypeIds(playerId, htSchool);

  for i:= 0 to High(ids) do
  begin

    for queueIndex:= 0 to 5 do
    begin

      unitType := BH_GetUnitType(S.HouseSchoolQueue(ids[i], queueIndex));

      if (unitType = utNone) then
      begin

        if (queueIndex = 0) then
        begin

          if (S.HouseWareAmount(ids[i], wtGold) > 0) then
          begin
            result := result + '[$00FFFF]<$100>|' ;
          end;
        end;

      end;

      unitsCount := BH_ChangeCitizensCountInfo(unitsCount, unitType, -1);

    end;
  end;


  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Woodcutter, utWoodcutter);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Miner, utMiner);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.AnimalBreeder, utAnimalBreeder);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Farmer, utFarmer);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Carpenter, utCarpenter);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Baker, utBaker);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Butcher, utButcher);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Fisher, utFisher);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Stonemason, utStonemason);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Smith, utSmith);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Metallurgist, utMetallurgist);
  result := BH_AddSchoolMissingOrders(playerId, unitsCount.Recruit, utRecruit);

  result := result + BH_GetWeaponBuildingOrdersTips(playerId);

  result := result + '|';
end;

function BH_GetBuildingsNumeratedList(buildings : array of BH_BuildingInfo): string;
var
  i: integer;

begin

  for i:= 0 to High(buildings) do
  begin
    result := result + S.HouseTypeNameEx(buildings[i].BuildingType) + ': ' + IntToStr(buildings[i].Count) + '|';
  end;

end;

function BH_GetBuildingsExtendedNumeratedList (playerId: integer; buildings: array of BH_BuildingInfo) : string;
var
  i: integer;
  count: integer;
  color: BH_Color;
begin

  for i:= 0 to High(buildings) do
  begin

    count := BH_GetPlayerConnectedHousePlansCount(playerId, buildings[i].BuildingType);

    if (count <= 0) then
    begin
      color := Color_Red;
    end else
    if (count < buildings[i].Count) then
    begin
      color := Color_Yellow;
    end else
    begin
      color := Color_Green;
    end;

    result := result + BH_GetColor(color) +  S.HouseTypeNameEx(buildings[i].BuildingType);
    result := result + ': (' + IntToStr(count) + '/' + IntToStr(buildings[i].Count) + ')|';

  end;

end;

function BH_GetPlannedHouses(player: BH_Player; buildings: BH_BuildingsCountInfo; planning: boolean): array of BH_BuildingInfo;
var
  strategy: BH_BuildingStrategy;

begin

  if (player.BuildingStrategy = BS_Null) then
  begin
    strategy := BH_GlobalBuildingStrategy;
  end else
  begin
    strategy := player.BuildingStrategy;
  end;

  case strategy of
    BS_Default_60:
      result := BH_Default60_GetPlannedHouses(player, buildings, planning);
    BS_IronStoring_60:
      result := BH_IronStoring60_GetPlannedHouses(player, buildings, planning);
    BS_LeatherOnly_60:
      result := BH_Default60_GetPlannedHouses(player, buildings, planning);
      //result := BH_LeatherOnly60_GetPlannedHouses(player, buildings, planning);
    BS_Default35:
      result := BH_Default60_GetPlannedHouses(player, buildings, planning);

  end;
end;

function BH_GetAdvices(playerIndex: integer; buildings: BH_BuildingsCountInfo; buildingHouses: array of BH_BuildingInfo; plannedBuildings: array of BH_BuildingInfo): string;
var
  i: integer;
  strategy: BH_BuildingStrategy;
  timedAdvices: string;

begin

  if (BH_Players[playerIndex].BuildingStrategy = BS_Null) then
  begin
    strategy := BH_GlobalBuildingStrategy;
  end else
  begin
    strategy := BH_Players[playerIndex].BuildingStrategy;
  end;

  case strategy of
    BS_Default_60:
      result := BH_Default60_GetAdvices(playerIndex, buildings, buildingHouses, plannedBuildings);
    BS_IronStoring_60:
      result := BH_IronStoring_GetAdvices(playerIndex, buildings, buildingHouses, plannedBuildings);
    BS_Default35:
      result := BH_Default60_GetAdvices(playerIndex, buildings, buildingHouses, plannedBuildings);
  end;

  timedAdvices := '';
  for i:= 0 to High(BH_Players[playerIndex].Advices) do
  begin
    if (BH_Players[playerIndex].Advices[i].ShowTime > 0) then
    begin
      timedAdvices := timedAdvices + BH_GetColor(BH_Players[playerIndex].Advices[i].Color) + BH_Players[playerIndex].Advices[i].Id + '|';
    end;
  end;

  result := timedAdvices + result;
end;

procedure BH_ShowOverlay(playerIndex: integer);
var
  overlay: string;

  buildings: BH_BuildingsCountInfo;
  tmpHouses: BH_BuildingsCountInfo;
  buildingHouses: array of BH_BuildingInfo;
  plannedHouses: array of BH_BuildingInfo;

begin

  //TODO pass here BH_Player instead of PlayerIndex.

  buildings := BH_GetPlayerBuildingsCountInfo(BH_Players[playerIndex].Id);
  buildingHouses := BH_GetPlannedHouses(BH_Players[playerIndex], buildings, false);

  //if (Length(buildingHouses) < GetMaxPlanCount(Players[playerIndex].PlayerId, false)) then
  //begin
  //  tmpHouses := Unite(buildings, buildingHouses);
  //  buildingHouses := GetPlannedHouses(Players[playerIndex].PlayerId, tmpHouses, false);
  //end;

  tmpHouses := BH_ExtendBuildingsCountInfo(buildings, buildingHouses);

  plannedHouses := BH_GetPlannedHouses(BH_Players[playerIndex], tmpHouses, true);

  overlay := overlay + '<$1>: |'
  overlay := overlay + BH_GetBuildingsExtendedNumeratedList(BH_Players[playerIndex].Id, buildingHouses) + '|';

  overlay := overlay + BH_GetColor(Color_White) + '<$2>: |'
  overlay := overlay + BH_GetBuildingsNumeratedList(plannedHouses) + '|';

  overlay := overlay + '<$3>: |';
  overlay := overlay + BH_GetOrdersInBuildingsAdvices(BH_Players[playerIndex].Id, buildings);

  overlay := overlay + BH_GetColor(Color_White) + '<$4>: |'
  overlay := overlay + BH_GetAdvices(playerIndex, buildings, buildingHouses, plannedHouses) + '|';
  //overlay := overlay + BH_GetDebugOverlayString(playerIndex);

  A.OverlayTextSet(BH_Players[playerIndex].Id, overlay);
end;

procedure BH_UpdateBuildingsInfoOverlayData(playerIndex: integer);
begin



end;

procedure BH_OnTick;
var
  playersCount: integer;
  modInt: integer;
  //i: integer;
begin

  playersCount := Length(BH_Players);

  if (playersCount < 3) then
  begin
    modInt := 6;
  end;
  if (Length(BH_Players) < 6) then
  begin
    modInt := 3;
  end
  else
  begin
    modInt := 2;
  end;

  if (S.GameTime mod modInt = 0) then
  begin
    BH_ShowOverlay(currentPlayerIndex);
    Inc(currentPlayerIndex);

    if currentPlayerIndex > High(BH_Players) then
    begin
      currentPlayerIndex := 0;
    end;
  end;

  //TODO. Make overlay update for every player in different tick. Just to be sure that all is working fast.
  //if (S.GameTime mod BH_Seconds = 0) then
  //begin
  //  for i:= 0 to High(BH_Players) do
  //  begin
  //    BH_ShowOverlay(i);
  //  end;
  //end;
end;

procedure BH_OnMissionStart;
begin
  BH_InitStrategy();
end;

